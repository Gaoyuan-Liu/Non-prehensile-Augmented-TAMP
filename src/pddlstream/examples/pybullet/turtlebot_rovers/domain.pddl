(define (domain rovers)
  (:requirements :strips :equality)
  ; (:constants)
  (:predicates
    (Rover ?r)
    (Objective ?o)
    (Mode ?m)
    (Rock ?g) ; Gravel
    (Soil ?s)
    (Store ?s)
    (Lander ?l)
    (Type ?b ?t)

    (Conf ?r ?q)
    (Ray ?y)
    (Motion ?r ?q1 ?t ?q2)
    (ImageConf ?r ?q ?y ?o)
    (TransmitConf ?r ?q ?y ?l)
    (Above ?r ?q ?g)
    (CFreeRayConf ?y ?r ?q)

    (AtConf ?r ?q)
    (OnBoard ?c ?r)
    (Supports ?c ?m)
    (Calibrated ?c ?r)
    (HaveImage ?r ?o ?m)
    (ReceivedImage ?o ?m)
    (ReceivedAnalysis ?g)
    (Analyzed ?r ?g)
    (Free ?r ?s)
    (Full ?r ?s)

    (Occluded ?y)
  )
  ; (:functions)

  (:action move
    :parameters (?r ?q1 ?t ?q2)
    :precondition (and (Motion ?r ?q1 ?t ?q2)
                       (AtConf ?r ?q1))
    :effect (and (AtConf ?r ?q2)
                 (not (AtConf ?r ?q1)))
  )
  (:action take_image
    :parameters (?r ?q ?y ?o ?c ?m)
    :precondition (and (ImageConf ?r ?q ?y ?o) (OnBoard ?c ?r) (Supports ?c ?m)
                       (AtConf ?r ?q) (Calibrated ?c ?r)
                       (not (Occluded ?y))
                  )
    :effect (and (HaveImage ?r ?o ?m)
                 (not (Calibrated ?c ?r)))
  )
  (:action calibrate
    :parameters (?r ?q ?y ?o ?c)
    :precondition (and (ImageConf ?r ?q ?y ?o) (OnBoard ?c ?r)
                       (AtConf ?r ?q)
                       (not (Occluded ?y))
                  )
    :effect (Calibrated ?c ?r)
  )
  (:action send_image
    :parameters (?r ?q ?y ?l ?o ?m)
    :precondition (and (TransmitConf ?r ?q ?y ?l) (Objective ?o) (Mode ?m)
                       (HaveImage ?r ?o ?m) (AtConf ?r ?q)
                       (not (Occluded ?y))
                  )
    :effect (ReceivedImage ?o ?m)
  )

  (:action sample_rock
    :parameters (?r ?q ?g ?s)
    :precondition (and (Above ?r ?q ?g) (Store ?s)
                       (AtConf ?r ?q) (Free ?r ?s))
    :effect (and (Full ?r ?s) (Analyzed ?r ?g)
                 (not (Free ?r ?s)))
  )
  (:action send_analysis
    :parameters (?r ?q ?y ?l ?g)
    :precondition (and (TransmitConf ?r ?q ?y ?l) (Rock ?g)
                       (Analyzed ?r ?g) (AtConf ?r ?q)
                       (not (Occluded ?y))
                  )
    :effect (ReceivedAnalysis ?g)
  )
  (:action drop_rock
    :parameters (?r ?s)
    :precondition (and (Rover ?r) (Store ?s)
                       (Full ?r ?s))
    :effect (and (Free ?r ?s)
                 (not (Full ?r ?s)))
  )

  ;(:action recharge # TODO: sample states accessible by sun
  ;  :parameters (?r ?q)
  ;  :precondition (and (InSun ?q)
  ;                     (AtConf ?r ?q)
  ;                )
  ;  :effect (Charged ?r)
  ;)

  (:derived (Occluded ?y)
    (exists (?r ?q) (and (Ray ?y) (Conf ?r ?q)
                         (not (CFreeRayConf ?y ?r ?q))
                         (AtConf ?r ?q)))
  )
)
